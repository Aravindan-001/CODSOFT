

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

try:
    df = pd.read_csv('IRIS.csv')
    print('Loaded IRIS.csv from local file')
except Exception as e:
    from sklearn import datasets
    iris = datasets.load_iris(as_frame=True)
    df = iris.frame
    print('Loaded sklearn iris dataset')


if df.shape[1] <= 2:
    # Attempt to reconstruct from the preview-like structure
    # Fallback: load sklearn if local is malformed
    from sklearn import datasets
    iris = datasets.load_iris(as_frame=True)
    df = iris.frame
    print('Local IRIS.csv looked malformed; reverted to sklearn iris frame')

df.columns = [c.strip().lower().replace(' (cm)', '') for c in df.columns]

rename_map = {
    'sepal length (cm)': 'sepal_length',
    'sepal width (cm)': 'sepal_width',
    'petal length (cm)': 'petal_length',
    'petal width (cm)': 'petal_width',
    'sepal length': 'sepal_length',
    'sepal width': 'sepal_width',
    'petal length': 'petal_length',
    'petal width': 'petal_width',
    'target': 'species'
}

norm_cols = []
for c in df.columns:
    norm = c.replace(' ', '_')
    norm_cols.append(norm)
df.columns = norm_cols

for old, new in rename_map.items():
    if old in df.columns:
        df = df.rename(columns={old: new})


required = ['sepal_length', 'sepal_width', 'petal_length', 'petal_width']

if 'species' not in df.columns and 'target' in df.columns:
    df = df.rename(columns={'target': 'species'})

if np.issubdtype(df['species'].dtype, np.number):
    from sklearn import datasets
    iris = datasets.load_iris()
    target_names = iris.target_names
    df['species'] = df['species'].apply(lambda i: target_names[int(i)])

print(df.head())
print(df.shape)
print(df.dtypes)
print(df.isna().sum())

dup_count_before = df.duplicated().sum()
print(dup_count_before)
if dup_count_before > 0:
    df = df.drop_duplicates().reset_index(drop=True)
    dup_count_after = df.duplicated().sum()
    print('Dropped duplicates. Remaining duplicates: ' + str(dup_count_after))
else:
    print('No duplicate rows found')

sns.set(style='whitegrid')


plt.figure(figsize=(5,4))
sns.countplot(x='species', data=df, palette='Set2')
plt.title('Count of Each Iris Species')
plt.xlabel('Species')
plt.ylabel('Count')
plt.tight_layout()
plt.show()

features = ['sepal_length', 'sepal_width', 'petal_length', 'petal_width']
plt.figure(figsize=(8,6))
for idx, col in enumerate(features, 1):
    plt.subplot(2, 2, idx)
    sns.histplot(df[col], kde=True, bins=20, color='steelblue')
    plt.title(col.replace('_', ' ').title())
plt.tight_layout()
plt.show()

plt.figure(figsize=(6,4))
sns.boxplot(x='species', y='sepal_length', data=df, palette='Pastel1')
plt.title('Sepal Length by Species')
plt.tight_layout()
plt.show()

plt.figure(figsize=(6,4))
sns.boxplot(x='species', y='petal_width', data=df, palette='Pastel2')
plt.title('Petal Width by Species')
plt.tight_layout()
plt.show()

plt.figure(figsize=(6,4))
sns.violinplot(x='species', y='petal_length', data=df, palette='Set3', inner='quartile')
plt.title('Petal Length by Species (Violin)')
plt.tight_layout()
plt.show()

plt.figure(figsize=(6,5))
sns.scatterplot(data=df, x='petal_length', y='petal_width', hue='species', palette='Set1', s=60, edgecolor='white')
plt.title('Petal Length vs Petal Width')
plt.tight_layout()
plt.show()

plt.figure(figsize=(6,5))
sns.scatterplot(data=df, x='sepal_length', y='sepal_width', hue='species', palette='Set1', s=60, edgecolor='white')
plt.title('Sepal Length vs Sepal Width')
plt.tight_layout()
plt.show()

pp = sns.pairplot(df[features + ['species']], hue='species', corner=False, diag_kind='hist', palette='Set2')
pp.fig.suptitle('Iris Pairplot', y=1.02)
plt.show()

corr = df[features].corr()
plt.figure(figsize=(5,4))
sns.heatmap(corr, annot=True, cmap='coolwarm', vmin=-1, vmax=1, linewidths=0.5)
plt.title('Feature Correlation Heatmap')
plt.tight_layout()
plt.show()

clean_path = 'iris_clean.csv'
df.to_csv(clean_path, index=False)
print('Saved cleaned dataset to ' + clean_path)
